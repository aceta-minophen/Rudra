#pragma once
#include <cstdarg>
namespace Eloquent
{
    namespace ML
    {
        namespace Port
        {
            class SVM
            {
            public:
                /**
                 * Predict class for features vector
                 */
                int predict(float *x)
                {
                    float kernels[53] = {0};
                    float decisions[10] = {0};
                    int votes[5] = {0};
                    kernels[0] = compute_kernel(x, -50.0, -85.0, -83.0, 0.0, -66.0, 0.0, -90.0, 0.0, -90.0, 0.0, -82.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[1] = compute_kernel(x, -56.0, -70.0, -80.0, -81.0, -60.0, 0.0, 0.0, 0.0, -91.0, 0.0, -76.0, 0.0, -90.0, -90.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[2] = compute_kernel(x, -56.0, -75.0, -80.0, -85.0, -61.0, 0.0, -89.0, -91.0, -94.0, 0.0, -72.0, 0.0, -92.0, 0.0, 0.0, -93.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[3] = compute_kernel(x, -55.0, -82.0, -79.0, -82.0, -66.0, 0.0, -90.0, 0.0, -91.0, 0.0, -73.0, 0.0, -91.0, -89.0, 0.0, -96.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[4] = compute_kernel(x, -64.0, -83.0, -79.0, -77.0, -65.0, 0.0, -91.0, -93.0, -92.0, 0.0, -72.0, 0.0, -90.0, -86.0, 0.0, -95.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[5] = compute_kernel(x, -53.0, -80.0, -94.0, -81.0, -59.0, 0.0, 0.0, -95.0, -92.0, 0.0, -71.0, 0.0, -90.0, -85.0, 0.0, -91.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[6] = compute_kernel(x, -51.0, 0.0, -60.0, -83.0, -59.0, 0.0, 0.0, 0.0, -91.0, 0.0, -74.0, 0.0, -92.0, 0.0, 0.0, -94.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[7] = compute_kernel(x, -50.0, -78.0, -79.0, -80.0, -60.0, 0.0, -87.0, -91.0, -91.0, 0.0, -75.0, 0.0, 0.0, 0.0, 0.0, -92.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[8] = compute_kernel(x, -53.0, -79.0, -80.0, -81.0, -62.0, 0.0, -91.0, -89.0, -94.0, 0.0, -74.0, 0.0, 0.0, -91.0, 0.0, -93.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[9] = compute_kernel(x, -47.0, -86.0, -82.0, -85.0, -60.0, 0.0, 0.0, 0.0, -89.0, 0.0, 0.0, 0.0, -91.0, -91.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[10] = compute_kernel(x, -49.0, -82.0, -80.0, -86.0, -63.0, 0.0, -87.0, -90.0, -91.0, 0.0, -69.0, 0.0, -94.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[11] = compute_kernel(x, -49.0, -81.0, -81.0, -86.0, -62.0, 0.0, -87.0, -94.0, -86.0, 0.0, -75.0, 0.0, -92.0, -94.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[12] = compute_kernel(x, -58.0, -75.0, -79.0, -90.0, -60.0, 0.0, 0.0, -90.0, -89.0, 0.0, -74.0, 0.0, 0.0, -92.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[13] = compute_kernel(x, -67.0, -63.0, -78.0, 0.0, -63.0, 0.0, 0.0, -92.0, -79.0, -88.0, -82.0, 0.0, -87.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -91.0);
                    kernels[14] = compute_kernel(x, -60.0, -69.0, -81.0, -79.0, -93.0, 0.0, 0.0, 0.0, -82.0, 0.0, -76.0, 0.0, -91.0, -89.0, -88.0, 0.0, -93.0, 0.0, 0.0, -93.0, 0.0);
                    kernels[15] = compute_kernel(x, -56.0, -61.0, -81.0, -76.0, -91.0, 0.0, 0.0, 0.0, -81.0, 0.0, -81.0, 0.0, 0.0, -89.0, -89.0, -94.0, 0.0, 0.0, 0.0, -96.0, -87.0);
                    kernels[16] = compute_kernel(x, -62.0, -65.0, -83.0, -70.0, -82.0, 0.0, 0.0, -93.0, -81.0, -85.0, -77.0, 0.0, -89.0, 0.0, -92.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[17] = compute_kernel(x, -63.0, -60.0, -77.0, -74.0, -66.0, 0.0, 0.0, 0.0, -82.0, -89.0, 0.0, 0.0, -89.0, -92.0, -91.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[18] = compute_kernel(x, -62.0, -63.0, -90.0, -73.0, -88.0, -93.0, 0.0, 0.0, -83.0, -85.0, -79.0, 0.0, -89.0, 0.0, -90.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[19] = compute_kernel(x, -64.0, -61.0, -77.0, -81.0, -68.0, -92.0, 0.0, 0.0, -82.0, -89.0, -81.0, 0.0, -87.0, -90.0, -92.0, -95.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[20] = compute_kernel(x, -63.0, -63.0, -80.0, -76.0, -93.0, -92.0, -89.0, 0.0, -82.0, -88.0, -77.0, 0.0, -87.0, -91.0, -91.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[21] = compute_kernel(x, -74.0, -72.0, -74.0, -76.0, -73.0, 0.0, 0.0, 0.0, 0.0, 0.0, -87.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[22] = compute_kernel(x, -68.0, -77.0, -75.0, -80.0, -94.0, 0.0, 0.0, 0.0, -94.0, 0.0, -83.0, -91.0, -93.0, 0.0, 0.0, -94.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[23] = compute_kernel(x, -67.0, -74.0, -79.0, -81.0, -78.0, -91.0, 0.0, 0.0, -93.0, 0.0, -89.0, -91.0, -91.0, 0.0, 0.0, -93.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[24] = compute_kernel(x, -61.0, -76.0, -76.0, -74.0, -92.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -89.0, 0.0, 0.0, -92.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[25] = compute_kernel(x, -68.0, -73.0, -78.0, -74.0, -79.0, -93.0, 0.0, 0.0, -95.0, 0.0, -92.0, 0.0, -91.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[26] = compute_kernel(x, -72.0, -72.0, -79.0, -74.0, -76.0, 0.0, 0.0, 0.0, 0.0, 0.0, -92.0, 0.0, -91.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[27] = compute_kernel(x, -68.0, -75.0, -79.0, -75.0, -92.0, 0.0, 0.0, 0.0, -91.0, 0.0, 0.0, 0.0, -92.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[28] = compute_kernel(x, -65.0, -77.0, -79.0, -71.0, -76.0, -93.0, 0.0, 0.0, -93.0, 0.0, 0.0, 0.0, -92.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[29] = compute_kernel(x, -67.0, -79.0, -79.0, -75.0, -74.0, -93.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -94.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[30] = compute_kernel(x, -71.0, -74.0, -79.0, -77.0, -72.0, 0.0, 0.0, 0.0, 0.0, 0.0, -94.0, 0.0, -90.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[31] = compute_kernel(x, -63.0, -74.0, -77.0, -73.0, -73.0, 0.0, 0.0, 0.0, -92.0, 0.0, 0.0, 0.0, -90.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -89.0);
                    kernels[32] = compute_kernel(x, -68.0, -71.0, -77.0, -72.0, -95.0, 0.0, 0.0, 0.0, -94.0, -94.0, 0.0, -91.0, -91.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[33] = compute_kernel(x, -64.0, -71.0, -78.0, -69.0, -73.0, 0.0, 0.0, 0.0, -93.0, -95.0, -90.0, -93.0, -90.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[34] = compute_kernel(x, -63.0, -59.0, -75.0, -71.0, -75.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[35] = compute_kernel(x, -57.0, -69.0, -79.0, -68.0, -82.0, 0.0, 0.0, 0.0, 0.0, 0.0, -88.0, 0.0, -92.0, 0.0, -93.0, -93.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[36] = compute_kernel(x, -60.0, -73.0, -77.0, -66.0, -82.0, -95.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -91.0, -93.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[37] = compute_kernel(x, -57.0, -60.0, -77.0, -70.0, -74.0, -91.0, 0.0, 0.0, -94.0, 0.0, -87.0, 0.0, 0.0, -91.0, -94.0, -91.0, 0.0, 0.0, -92.0, 0.0, 0.0);
                    kernels[38] = compute_kernel(x, -59.0, -64.0, -79.0, -73.0, -77.0, -93.0, 0.0, 0.0, -93.0, 0.0, 0.0, 0.0, 0.0, -91.0, 0.0, -93.0, 0.0, 0.0, -89.0, 0.0, 0.0);
                    kernels[39] = compute_kernel(x, -59.0, -67.0, -76.0, -68.0, -77.0, -93.0, -94.0, 0.0, 0.0, 0.0, 0.0, -92.0, -93.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -93.0);
                    kernels[40] = compute_kernel(x, -59.0, -68.0, -78.0, -69.0, -77.0, -92.0, -93.0, 0.0, 0.0, 0.0, 0.0, 0.0, -92.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[41] = compute_kernel(x, -59.0, -69.0, -80.0, -70.0, -87.0, 0.0, 0.0, 0.0, 0.0, 0.0, -86.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[42] = compute_kernel(x, -78.0, -59.0, -76.0, -72.0, -76.0, -94.0, -91.0, -92.0, -93.0, 0.0, 0.0, 0.0, -92.0, -92.0, -91.0, -90.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[43] = compute_kernel(x, -60.0, -70.0, -75.0, -69.0, -74.0, -92.0, 0.0, 0.0, 0.0, 0.0, -89.0, 0.0, 0.0, 0.0, -91.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[44] = compute_kernel(x, -54.0, -83.0, -93.0, -80.0, -91.0, 0.0, -78.0, -86.0, -91.0, 0.0, -81.0, 0.0, -82.0, -90.0, 0.0, -93.0, 0.0, -95.0, 0.0, 0.0, 0.0);
                    kernels[45] = compute_kernel(x, -57.0, 0.0, -91.0, 0.0, -61.0, -92.0, -81.0, -87.0, -86.0, 0.0, -83.0, 0.0, -79.0, -86.0, 0.0, -90.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[46] = compute_kernel(x, -56.0, -84.0, -88.0, -84.0, -60.0, 0.0, -83.0, -89.0, -88.0, 0.0, -78.0, 0.0, -80.0, -83.0, 0.0, -90.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[47] = compute_kernel(x, -55.0, -83.0, -88.0, -85.0, -61.0, -93.0, 0.0, 0.0, -87.0, 0.0, 0.0, 0.0, -81.0, -86.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[48] = compute_kernel(x, -63.0, -89.0, -89.0, -85.0, -63.0, -93.0, -84.0, 0.0, 0.0, 0.0, -87.0, 0.0, -90.0, -89.0, 0.0, -93.0, 0.0, 0.0, -96.0, 0.0, 0.0);
                    kernels[49] = compute_kernel(x, -64.0, -90.0, -69.0, 0.0, -66.0, 0.0, -86.0, 0.0, 0.0, 0.0, -85.0, 0.0, -91.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[50] = compute_kernel(x, -64.0, -83.0, -90.0, -89.0, -71.0, 0.0, -87.0, 0.0, 0.0, 0.0, -81.0, 0.0, -92.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[51] = compute_kernel(x, -63.0, -84.0, -89.0, -90.0, -71.0, -96.0, -84.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -92.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    kernels[52] = compute_kernel(x, -63.0, -86.0, -87.0, -93.0, -68.0, 0.0, -83.0, 0.0, 0.0, 0.0, -87.0, 0.0, -94.0, 0.0, 0.0, -92.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    decisions[0] = 0.761644193753 + kernels[0] * 2.7688403e-05 + kernels[1] * 6.8133853e-05 + kernels[5] * 3.1365758e-05 + kernels[6] * 1.8993084e-05 + kernels[9] * 2.315013e-05 + kernels[12] * 7.83824e-06 + kernels[13] * -5.6304484e-05 + kernels[14] * -4.3989658e-05 + kernels[15] * -1.8752057e-05 + kernels[17] * -3.7343375e-05 + kernels[19] * -1.6003696e-05 + kernels[20] * -4.776196e-06;
                    decisions[1] = 1.274787682978 + kernels[0] * 8.3530558e-05 + kernels[6] * 0.000164393821 + kernels[9] * 0.000188021589 + kernels[10] * 4.4661795e-05 + kernels[21] * -7.0357427e-05 + kernels[22] * -9.1817024e-05 + kernels[24] * -1.2067977e-05 + kernels[25] * -5.7106059e-05 + kernels[27] * -0.00021071166 + kernels[31] * -3.8547615e-05;
                    decisions[2] = -0.193884086639 + kernels[0] * 6.9765324e-05 + kernels[6] * 6.4708998e-05 + kernels[7] * 5.3313431e-05 + kernels[9] * 7.6429216e-05 + kernels[12] * 7.2670094e-05 + kernels[38] * -3.4204699e-05 + kernels[41] * -0.000200685231 + kernels[42] * -0.000101997133;
                    decisions[3] = 10.734953489218 + kernels[2] * 0.00120268131 + kernels[3] * 0.001774679136 + kernels[4] * 0.007819174729 + kernels[5] * 0.002332348225 + kernels[8] * 0.001992902283 + kernels[11] * 0.001939118114 + kernels[44] * -0.000148899971 + kernels[45] * -1.979494e-05 + kernels[46] * -0.015831947921 + kernels[47] * -0.000768760694 + kernels[49] * -0.000291500271;
                    decisions[4] = -0.727323003402 + kernels[13] * 7.9884185e-05 + kernels[14] * 3.8863041e-05 + kernels[18] * 0.000110326029 + kernels[21] * -8.93065e-07 + kernels[25] * -9.1434955e-05 + kernels[26] * -1.0371925e-05 + kernels[29] * -7.08449e-07 + kernels[31] * -4.48232e-05 + kernels[33] * -8.084166e-05;
                    decisions[5] = -1.499938239922 + kernels[14] * 4.935095e-06 + kernels[15] * 7.4131347e-05 + kernels[16] * 4.0424472e-05 + kernels[18] * 2.018867e-05 + kernels[19] * 9.0810718e-05 + kernels[20] * 1.4277441e-05 + kernels[35] * -7.7933343e-05 + kernels[36] * -5.49329e-06 + kernels[37] * -7.7891816e-05 + kernels[41] * -2.1069757e-05 + kernels[42] * -5.7870561e-05 + kernels[43] * -4.508976e-06;
                    decisions[6] = -1.156676028671 + kernels[13] * 5.278956e-05 + kernels[14] * 2.9704372e-05 + kernels[15] * 7.545303e-06 + kernels[19] * 1.3060118e-05 + kernels[20] * 5.6587926e-05 + kernels[44] * -1.1567803e-05 + kernels[45] * -2.3120417e-05 + kernels[46] * -1.725121e-05 + kernels[47] * -6.1376176e-05 + kernels[49] * -4.0373326e-05 + kernels[50] * -5.998345e-06;
                    decisions[7] = -3.007050917699 + kernels[21] * 0.004133620628 + kernels[24] * 0.000442015886 + kernels[27] * 6.2683294e-05 + kernels[29] * 0.000154276482 + kernels[32] * 2.0765371e-05 + kernels[34] * -0.000542086365 + kernels[35] * -0.000305568635 + kernels[36] * -7.2126478e-05 + kernels[38] * -1.7832426e-05 + kernels[39] * -1.0095447e-05 + kernels[40] * -9.6741069e-05 + kernels[41] * -0.003768911242;
                    decisions[8] = 0.874578870411 + kernels[21] * 1.9435662e-05 + kernels[23] * 4.726041e-06 + kernels[24] * 2.7399859e-05 + kernels[28] * 0.000222462354 + kernels[29] * 2.2394921e-05 + kernels[30] * 0.000201039967 + kernels[31] * 3.01639e-06 + kernels[47] * -0.000247104679 + kernels[49] * -7.9334177e-05 + kernels[50] * -0.000134014812 + kernels[52] * -4.0021526e-05;
                    decisions[9] = 2.835463132923 + kernels[35] * 1.3447816e-05 + kernels[36] * 5.1109885e-05 + kernels[38] * 0.00032442761 + kernels[40] * 0.000871582952 + kernels[41] * 0.000474028835 + kernels[42] * 0.000241676732 + kernels[45] * -9.8729666e-05 + kernels[47] * -0.000653129119 + kernels[48] * -1.4088866e-05 + kernels[49] * -0.000291430371 + kernels[50] * -0.000254334104 + kernels[51] * -0.000664561705;
                    votes[decisions[0] > 0 ? 0 : 1] += 1;
                    votes[decisions[1] > 0 ? 0 : 2] += 1;
                    votes[decisions[2] > 0 ? 0 : 3] += 1;
                    votes[decisions[3] > 0 ? 0 : 4] += 1;
                    votes[decisions[4] > 0 ? 1 : 2] += 1;
                    votes[decisions[5] > 0 ? 1 : 3] += 1;
                    votes[decisions[6] > 0 ? 1 : 4] += 1;
                    votes[decisions[7] > 0 ? 2 : 3] += 1;
                    votes[decisions[8] > 0 ? 2 : 4] += 1;
                    votes[decisions[9] > 0 ? 3 : 4] += 1;
                    int val = votes[0];
                    int idx = 0;

                    for (int i = 1; i < 5; i++)
                    {
                        if (votes[i] > val)
                        {
                            val = votes[i];
                            idx = i;
                        }
                    }

                    return idx;
                }

                /**
                 * Predict readable class name
                 */
                const char *predictLabel(float *x)
                {
                    return idxToLabel(predict(x));
                }

                /**
                 * Convert class idx to readable name
                 */
                const char *idxToLabel(uint8_t classIdx)
                {
                    switch (classIdx)
                    {
                    case 0:
                        return "bedroom";
                    case 1:
                        return "hall";
                    case 2:
                        return "livingroom";
                    case 3:
                        return "mishty";
                    case 4:
                        return "naina";
                    default:
                        return "Houston we have a problem";
                    }
                }

            protected:
                /**
                 * Compute kernel between feature vector and support vector.
                 * Kernel type: linear
                 */
                float compute_kernel(float *x, ...)
                {
                    va_list w;
                    va_start(w, 21);
                    float kernel = 0.0;

                    for (uint16_t i = 0; i < 21; i++)
                    {
                        kernel += x[i] * va_arg(w, double);
                    }

                    return kernel;
                }
            };
        }
    }
}